1. create dashboard components *on hold.

2. understand createSelector and createEntityAdapters? create api to grab the Routines and then put into adapter. When a Routine is selected, it will grab the sessions with the routine id and populate the session, exercise, and comment adapters. Each endpoint will need to handle the respond by adjusting the current data in the adapters.
watch this https://www.youtube.com/watch?v=TPAAQnVxc-I&list=PL0Zuz27SZ-6P4dQUsoDatjEGpmBpcOW8V&index=6&t=190s
at 17:22


continue with videos 

** on to testing getting all sessions that belong to the routineID and then all exercises that belong to the sessionId

RTK Query uses a "document cache" approach:
    Therefore:
        For Routines:
            1. Retrieve all routines from server
            2. Use RTK createEntityAdapter to cache the document  {ids: [], entities}
            3. Provide Tags so that if triggered by another reducer it assumes data is invalidated so fetch again

        For Sessions:
            just do all session and exercise tags
            https://stackoverflow.com/questions/76396659/how-to-avoid-re-render-in-rtk-query
                if modifying one exercise, like toggling a checkbox, re-renders entire sesssion (add console log to each exercise if they print when a different exercise is modified) then add memo to each exercise. else NICE! React sees that the specific components with the exercises did not have any state changes so it does not re-render.


        May need to memo sessions and exercise, but check re-render without
        * Essentially boils down to:
            Do I make more DB API calls or intensive ones with lookup to join documents in the Server to return normalized or seperate collections.
            OR 
            parse the response in the Front end into entities and sync with api calls to server or re-fetch on every nested property change.

            In this case. Less server calls to DB. Front end gets nested documents so it parses into entity adapters, then on changes it needs to api call to server apply change and then locally update the adapter.

            Next Project just seperate everything into different collections, therefore multpile DB calls but don't do a lookup (join). The associations will be conducted in the Front end.
        hmmmmm
            - createApi for sessions
                Has session entity adapter
                Has exercise entity adapter (export)

                GET allsessions provides tags [type: sessions, ids: []], // provides tags [type: exercises, ids: []]    * cannot provide 2 tags in an endpoint
                    transform and put into session entity adapter
                    transform and put into exercise entity adapter
                //*dont need, GET single session, e.g. providesTags: (result, error, arg) => [{ type: 'Session', id: arg }], update data cache for this specific
                ADD new session. Invalidates [sessions, id: LIST], which is encompasses [type: sessions, ids: []] so refetch will occur
                Update, invalidates specific session. e.g. invalidatesTags: (result, error, arg) => [{ type: 'Session', id: arg.id }],
                Delete, invalidates specific session. e.g. invalidatesTags: (result, error, arg) => [{ type: 'Session', id: arg.id }],

                - Has selectors

            - createApi for exercises 
                import exercise entity adapter

                // GET exercises (multi)   provides tags [type: exercises, ids: []]
                // GET exercise (single) providesTags for specific. e.g. providesTags: (result, error, arg) => [{ type: 'Exercise', id: arg }]
                add one, invalidates [sessions]. Trigger Sessions Api   //[exercises]
                    api call
                    //adapter.addOne
                update invalidates for specific. e.g. invalidatesTags: (result, error, arg) => [{ type: 'Session', id: arg }]
                    api call
                    //adapter.updateone
                delete invalidates for specific. e.g. invalidatesTags: (result, error, arg) => [{ type: 'Session', id: arg }]
                    api call
                    //adapter.deleteone

                - selectors

            // don't need
            - exercises of all the sessions slice with Entity adapter
                reducers:
                    
                extraReducers
                    GET sessions fulfilled. 
                        get all exercises from payload
                        setAll exercises into Adapter

                    update exercise fulfilled:
                        bookUpdated: booksAdapter.updateOne // will trigger the update for the specific exercise that uses selector for it.
                    
                - has selector for all exercises with specific sessionID
                - has selector for specific exercise, so now that component that changes has a specific selector hook and will only rerender itself.

login and regsiter
1. handle all responses from server
    register
        400: message: Please provide the required fields!
        created: 201: {user: {name: response.getName()}, token: token}
    
    login
        400: message: Please provide the required fields!
        401: Invalid credentials!
        success: 200: {user: {name: response.getName()}, token: token}


2. look up standard way to store JWT in cookies, is the setter and getter in the authSlice?
3. Once authenticated, just show message




